# -*- coding: utf-8 -*-
"""Crew_AI.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1AYWHbLRKWeNOXjwMs-NMgN49UcGQaMgV

# 1. Environment Setup
The notebook starts by installing necessary packages using `pip`. This is done in the first few cells:
"""

!pip install poetry
!pip install crewai crewai-tools
!pip install serper-dev

"""- **Poetry**: A dependency management tool for Python.

- **CrewAI and CrewAI-Tools**: Libraries for building AI agents and tools.

- **Serper-Dev**: A tool for web search capabilities (though it seems to have an installation issue).

### Explanation of Agents and Tools

#### Agents

- **Agent**: In CrewAI, an agent is an autonomous entity that performs tasks based on its role, goals, and available tools. Agents are defined with specific attributes such as role, goal, and backstory, which guide their behavior.

  ```python
  from crewai import Agent

  class ResearchAgent:
      def __init__(self):
          self.agent = Agent(
              role='AI Researcher',
              goal='Uncover cutting-edge AI trends',
              backstory='You are an expert researcher in AI, with a knack for finding the latest trends.'
          )
  ```

- **Attributes**:

  - **Role**: Defines the agent's function or job.
  
  - **Goal**: Specifies what the agent aims to achieve.
  
  - **Backstory**: Provides context or background for the agent, which can influence its decision-making.
"""

from crewai import Agent, Task, Crew, Process
from crewai_tools import SerperDevTool
import os

os.environ["OPENAI_API_KEY"] = "YOUR_API_KEY"
os.environ["SERPER_API_KEY"] = "Your Key" # serper.dev API key

search_tool = SerperDevTool()

"""
#### 2. **Defining Agents**
The code defines two agents: `ResearchAgent` and `ReportingAgent`."""

ResearchAgent= Agent(
            role='AI Researcher',
            goal='Uncover cutting-edge AI trends',
            backstory='You are an expert researcher in AI, with a knack for finding the latest trends.',
            tools=[search_tool]  # Adding a web search tool for the agent
        )

ReportingAgent=Agent(
            role='Reporting Analyst',
            goal='Write a report based on the research findings',
            backstory='You are known for turning data into insightful reports.'
        )

"""- **ResearchAgent**: Uses a tool (`SerperDevTool`) for web searches to find AI trends.

- **ReportingAgent**: Focuses on creating reports from the research findings.

#### 3. **Defining Tasks**
Tasks are defined for each agent to perform.

#### Tools

- **Tools**: Tools are utilities or capabilities that agents can use to perform their tasks. They can range from web search tools to data processing libraries.

  ```python
  from crewai_tools import SerperDevTool

  class ResearchAgent:
      def __init__(self):
          self.agent = Agent(
              role='AI Researcher',
              goal='Uncover cutting-edge AI trends',
              tools=[SerperDevTool()]  # Adding a web search tool for the agent
          )
  ```

- **SerperDevTool**: A tool that allows agents to perform web searches. This can be useful for research tasks where gathering information from the internet is necessary.
"""

ResearchTask = Task(
            description='Research the top AI trends in 2024.',
            expected_output='List the top 10 AI trends.',
            agent=ResearchAgent  # Assigning this task to the research agent

        )

ReportingTask = Task(
           description='Turn the research into a detailed report.',
           expected_output='A markdown report of AI trends.',
           agent=ReportingAgent,  # Assigning this task to the reporting agent
           output_file='report.md'  # The result will be saved here
        )

"""- **ResearchTask**: Task for the ResearchAgent to find AI trends.

- **ReportingTask**: Task for the ReportingAgent to create a report.

#### 4. **Assembling the Crew**

Time to assemble the agents and tasks into a crew.
"""

# Instantiate your crew with a sequential process
crew = Crew(
  agents=[ResearchAgent, ReportingAgent],
  tasks=[ResearchTask, ReportingTask],
  verbose=True, # You can set it to 1 or 2 to different logging levels
)

"""- **Crew**: Combines agents and tasks into a crew that executes tasks sequentially.

#### 5. **Running the Crew**

The `crew.kickoff` function initiates the crew process.
"""

# Get your crew to work!
result = crew.kickoff()

print(result)

"""- **crew.kickoff()**: Starts the crew with the specified inputs and executes the tasks.

### CrewAI Resources

   - [CrewAI GitHub](https://github.com/crewai/crewai)
   
   - This is the official repository where you can find the source code, documentation, and examples for using CrewAI.

2. **CrewAI Documentation**:

   - [CrewAI Docs](https://crewai.readthedocs.io/en/latest/)


   - The documentation provides detailed information on how to set up and use CrewAI, including API references and tutorials.

3. **CrewAI Tools**:

   - [CrewAI Tools GitHub](https://github.com/crewai/crewai-tools)
   
   - This repository contains additional tools and utilities that can be used with CrewAI to extend its functionality.

### How to Use Agents and Tools

1. **Define Agents**: Create classes for each agent, specifying their roles, goals, and any tools they might use.

2. **Assign Tasks**: Define tasks that agents will perform. Each task should have a description, expected output, and be assigned to an appropriate agent.

3. **Assemble the Crew**: Combine agents and tasks into a crew, which manages the execution of tasks.

4. **Execute Tasks**: Use the crew to kickoff tasks, providing any necessary inputs.
"""